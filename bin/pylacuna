#!/usr/bin/env python

import argparse
from pylacuna.game import Game

DESC = '''
DESCRIPTION
tbd

OUTPUT
tbd

NOTES
tbd
'''


def parse_args():
    parser = argparse.ArgumentParser(
        description=DESC,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-u', '--user', help="Username")
    parser.add_argument('-p', '--password', help="Password")
    subparsers = parser.add_subparsers(
        dest='command',
        help='sub-command help')

    # Create subparser for upgrade command
    upgrade_cmd = subparsers.add_parser(
        'upgrade', help='Upgrade various things on a body')
    upgrade_cmd.add_argument('body', help='Name of body')

    # Create subparser for build command
    build_cmd = subparsers.add_parser(
        'build',
        help=("Build stuff on a body"))

    # Create subparser for test command
    test_cmd = subparsers.add_parser(
        'test',
        help=("Work in progress test code"))

    # Create subparser for star command
    star_cmd = subparsers.add_parser(
        'get_nearest_habitable',
        help=("Finds the nearest habitable planets to your homeworld."))

    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    if args.command == 'upgrade':
        print "Upgrade function"
    if args.command == 'build':
        print "Build function"
    if args.command == "get_nearest_habitable":
        import pylacuna.core.body
        import pylacuna.core.spaceport
        import pylacuna.observatory
        # To get the nearest habitable, let's try
        # Initialize Game (this gets our session and server)
        g = Game()
        # We now have an active session, and knowledge of the home planet id.
        # We need to find the observatory, so first we need to get the
        # buildings of the home planet
        home_planet = pylacuna.core.body.Body(g.session, g.session.status['empire']['home_planet_id'])
        home_planet.get_buildings()
        # Now that we have the buildings, we need to get the Observatory
        obs = home_planet.find_building_by_name("Observatory")
        # And convert it to a subclass in order to use its method (this should
        # be done internally inside get_buildings() in the future)
        obs = pylacuna.observatory.Observatory.from_building(obs)
        # Now, using the observatory, we find all the stars that are probed.
        stars = obs.get_probed_stars()
        # The stars should already contain bodies. So now we just need to
        # search all stars for bodies that are habitable
        final = []
        for star in stars:
            for body in star.bodies:
                if body['type'] == 'habitable planet' and int(body['orbit']) == 3:
                    final.append(body)
        # Finally, loop over bodies and print
        print "\n\n\n"
        print "HABITABLE PLANETS IN ORBIT 3 AS SEEN BY PROBES"
        print "----------------------------------------------"
        for body in final:
            print "  {} orbiting {}".format(body['name'], body['star_name'])

        # Now let's get the ships that we can send to each.
        # First, we start by finding the space port.
        sp = home_planet.find_building_by_name("Space Port")
        sp = pylacuna.core.spaceport.SpacePort.from_building(sp)
        # Then we get the ships for each target.
        allships = []
        for planet in final:
            ships = sp.get_ships_for(home_planet.id, {"body_id": planet.id})
            allships.append((planet, ships))

        for p, t in allships:
            print "{} -- {} ships available".format(p['name'], len(t['result']['available']))
            for s in t['result']['available']:
                print "  {}".format(s['name'])

    if args.command == 'test':
        Game().test()

if __name__ == '__main__':
    main()
